// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace PetEntityFrameworkProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240819215703_InitialSchema")]
    partial class InitialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CourseTrainee", b =>
                {
                    b.Property<Guid>("CoursesSupportableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraineesTraineeId")
                        .HasColumnType("uuid");

                    b.HasKey("CoursesSupportableId", "TraineesTraineeId");

                    b.HasIndex("TraineesTraineeId");

                    b.ToTable("CourseTrainee");
                });

            modelBuilder.Entity("SupportCentre", b =>
                {
                    b.Property<Guid>("SupportCentreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("SupportableId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Workload")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("SupportCentreId");

                    b.HasIndex("SupportableId");

                    b.ToTable("SupportCentres");
                });

            modelBuilder.Entity("Supportable", b =>
                {
                    b.Property<Guid>("SupportableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("SupportableId");

                    b.ToTable("Supportables");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Supportable");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SupportableSupportCentre", b =>
                {
                    b.Property<Guid>("SupportableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupportCentreId")
                        .HasColumnType("uuid");

                    b.HasKey("SupportableId", "SupportCentreId");

                    b.HasIndex("SupportCentreId");

                    b.ToTable("SupportableSupportCentres");
                });

            modelBuilder.Entity("TestTrainee", b =>
                {
                    b.Property<Guid>("TestsSupportableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraineesTraineeId")
                        .HasColumnType("uuid");

                    b.HasKey("TestsSupportableId", "TraineesTraineeId");

                    b.HasIndex("TraineesTraineeId");

                    b.ToTable("TestTrainee");
                });

            modelBuilder.Entity("Trainee", b =>
                {
                    b.Property<Guid>("TraineeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TraineeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Trainees");
                });

            modelBuilder.Entity("Course", b =>
                {
                    b.HasBaseType("Supportable");

                    b.Property<Guid?>("SupportCentreId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasIndex("SupportCentreId");

                    b.HasDiscriminator().HasValue("Course");
                });

            modelBuilder.Entity("Test", b =>
                {
                    b.HasBaseType("Supportable");

                    b.Property<Guid?>("SupportCentreId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasIndex("SupportCentreId");

                    b.ToTable("Supportables", t =>
                        {
                            t.Property("SupportCentreId")
                                .HasColumnName("Test_SupportCentreId");

                            t.Property("Title")
                                .HasColumnName("Test_Title");
                        });

                    b.HasDiscriminator().HasValue("Test");
                });

            modelBuilder.Entity("CourseTrainee", b =>
                {
                    b.HasOne("Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesSupportableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trainee", null)
                        .WithMany()
                        .HasForeignKey("TraineesTraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SupportCentre", b =>
                {
                    b.HasOne("Supportable", null)
                        .WithMany("SupportCentres")
                        .HasForeignKey("SupportableId");
                });

            modelBuilder.Entity("SupportableSupportCentre", b =>
                {
                    b.HasOne("SupportCentre", "SupportCentre")
                        .WithMany("SupportableSupportCentres")
                        .HasForeignKey("SupportCentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Supportable", "Supportable")
                        .WithMany("SupportableSupportCentres")
                        .HasForeignKey("SupportableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportCentre");

                    b.Navigation("Supportable");
                });

            modelBuilder.Entity("TestTrainee", b =>
                {
                    b.HasOne("Test", null)
                        .WithMany()
                        .HasForeignKey("TestsSupportableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trainee", null)
                        .WithMany()
                        .HasForeignKey("TraineesTraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trainee", b =>
                {
                    b.HasOne("Company", "Company")
                        .WithMany("Trainees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Course", b =>
                {
                    b.HasOne("SupportCentre", null)
                        .WithMany("Courses")
                        .HasForeignKey("SupportCentreId");
                });

            modelBuilder.Entity("Test", b =>
                {
                    b.HasOne("SupportCentre", null)
                        .WithMany("Tests")
                        .HasForeignKey("SupportCentreId");
                });

            modelBuilder.Entity("Company", b =>
                {
                    b.Navigation("Trainees");
                });

            modelBuilder.Entity("SupportCentre", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("SupportableSupportCentres");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Supportable", b =>
                {
                    b.Navigation("SupportCentres");

                    b.Navigation("SupportableSupportCentres");
                });
#pragma warning restore 612, 618
        }
    }
}
